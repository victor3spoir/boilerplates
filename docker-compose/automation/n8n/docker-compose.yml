networks:
  dockernet:
    external: true

volumes:
  n8n_storage:
    name: n8n_storage
  n8n_pgsql_storage:
    name: n8n_pgsql_storage

x-n8n: &service-n8n
  image: n8nio/n8n:nightly
  networks:
    - dockernet
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=n8n_pgsql
    - DB_POSTGRESDB_USER=${POSTGRES_USER:-root}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-password}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
    - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED:-true}
    - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED:-true}
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-not-secure-dskhfdkfdskhfdshdshds}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-not-secure-sdfkjdhfkjdshf}

services:
  n8n_pgsql:
    image: postgres:17-alpine
    networks:
      - dockernet
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
    volumes:
      - n8n_pgsql_storage:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}',
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    entrypoint: /bin/sh
    command:
      - '-c'
      - 'n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows'
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      n8n_pgsql:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      n8n_pgsql:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
