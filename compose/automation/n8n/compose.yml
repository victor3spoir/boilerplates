networks:
  dockernet:
    external: true

volumes:
  n8n-vol:
    name: n8n-vol
  n8n-db-vol:
    name: n8n-db-vol

x-n8n: &service-n8n
  image: n8nio/n8n:next
  networks:
    - dockernet
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=n8n-db
    - DB_POSTGRESDB_USER=${POSTGRES_USER:-root}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-password}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
    - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED:-true}
    - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED:-true}
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-not-secure-dskhfdkfdskhfdshdshds}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-not-secure-sdfkjdhfkjdshf}
    # - N8N_EXTERNAL_STORAGE_S3_HOST=${N8N_EXTERNAL_STORAGE_S3_HOST:-minio}
    # - N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME=${N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME:-n8n}
    # - N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY=${N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY:-aeee4573b9074374545f}
    # - N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET=${N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET:-aeee4573b9074374545f}
    # - N8N_EXTERNAL_STORAGE_S3_AUTH_AUTO_DETECT=${N8N_EXTERNAL_STORAGE_S3_AUTH_AUTO_DETECT:-true}
    - N8N_METRICS=${N8N_METRICS:-true}
    - QUEUE_HEALTH_CHECK_ACTIVE=${QUEUE_HEALTH_CHECK_ACTIVE:-true}
    - N8N_PUBLIC_API_DISABLED=${N8N_PUBLIC_API_DISABLED:-false}
    - N8N_PUBLIC_API_SWAGGERUI_DISABLED=${N8N_PUBLIC_API_SWAGGERUI_DISABLED:-true}

services:
  n8n-db:
    image: postgres:17-alpine
    networks:
      - dockernet
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
    # volumes:
    #   - n8n-db-vol:/var/lib/postgresql/data
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}'
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    entrypoint: /bin/sh
    command:
      - '-c'
      - |
        n8n import:credentials --separate --input=/backup/credentials 
        && n8n import:workflow --separate --input=/backup/workflows
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      n8n-db:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      # - n8n-vol:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./n8n/shared:/data/shared
    depends_on:
      n8n-db:
        condition: service_healthy
      # n8n-import:
      #   condition: service_completed_successfully
    labels:
      - traefik.enable=true
      - allow.logs.enable=true
      - allow.traces.enable=true
      - allow.metrics.enable=true
      # - services
      - traefik.http.services.n8n-svc.loadbalancer.server.port=5678
      # - routers
      # - traefik.http.routers.n8n-rtr.rule=Host(`<appname.domain.com>`)
      - traefik.http.routers.n8n-rtr.tls=true
      # - traefik.http.routers.n8n-rtr.tls.certresolver=<certresolver>
      - traefik.http.routers.n8n-rtr.service=n8n-svc
      - traefik.http.routers.n8n-rtr.observability.accesslogs=true
      - traefik.http.routers.n8n-rtr.observability.metrics=true
      - traefik.http.routers.n8n-rtr.observability.tracing=true