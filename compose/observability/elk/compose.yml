# elasticsearch-create-enrollment-token -s kibana

networks:
  dockernet:
    external: true

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.4
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-password}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-admin}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD:-password}
    networks:
      - dockernet
    ports:
      - 9200:9200
      - 9300:9300

  logstash:
    image: docker.elastic.co/logstash/logstash:8.17.4
    hostname: logstash
    restart: unless-stopped
    volumes:
      - ./pipeline/:/usr/share/logstash/pipeline/
    environment:
      - monitoring.elasticsearch.hosts=http://elasticsearch:9200
      - MONITORING_ENABLED=monitoring.enabled
      - PIPELINE_WORKERS=pipeline.workers
    ports:
      - 9600:9600
    networks:
      - dockernet
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.4
    hostname: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      # - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-'["http://elasticsearch:9200"]'} # comma separeted
      - KIBANA_PASSWORD=${KIBANA_PASSWORD:-password}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-password}
      # enable fleet
      - KIBANA_FLEET_HOST=${KIBANA_FLEET_HOST:-http://kibana:5601}
      - KIBANA_FLEET_USERNAME=${KIBANA_FLEET_USERNAME:-admin}
      - KIBANA_FLEET_PASSWORD=${KIBANA_FLEET_PASSWORD:-password} # override this one ELASTICSEARCH_PASSWORD
      # - ELASTICSEARCH_PASSWORD
    ports:
      - 5601:5601
    networks:
      - dockernet
    depends_on:
      - elasticsearch

  # elastic-agent:
  #   # image: docker.elastic.co/elastic-agent/elastic-agent-complete:8.17.4
  #   image: docker.elastic.co/elastic-agent/elastic-agent:8.17.4
  #   container_name: elastic-agent
  #   restart: unless-stopped
  #   user: root
  #   environment:
  #     - FLEET_SERVER_ENABLE=${FLEET_SERVER_ENABLE:-true}
  #     # - FLEET_SERVER_ELASTICSEARCH_HOST=${FLEET_SERVER_ELASTICSEARCH_HOST:-http://elasticsearch:9200}
  #     # - FLEET_SERVER_POLICY_ID=${FLEET_SERVER_POLICY_ID:-dev-policy}
  #     # - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN:-NW5iTTJaVUJyR2xNZUdBZXVkVDc6bTZDY2NnSVdRQnVvSHlxN3NSeHRpQQ==}
  #     - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-password} # this replace token
  #     - FLEET_SERVER_INSECURE_HTTP=${FLEET_SERVER_INSECURE_HTTP:-true}
  #     - FLEET_SERVER_POLICY_NAME=${FLEET_SERVER_POLICY_NAME}
  #     - ELASTIC_AGENT_TAGS=${ELASTIC_AGENT_TAGS:-one,two,three}
  #     # - FLEET_ENROLL=1
  #     # - FLEET_URL
  #     # - FLEET_SERVER_SERVICE_TOKEN
  #     # - ELASTICSEARCH_USERNAME
  #     # - KIBANA_HOST
  #     # - KIBANA_USERNAME
  #     # - KIBANA_PASSWORD
  #   networks:
  #     - dockernet
  #   ports:
  #     - 8220:8220
  # elastic-agent-synthesis:
  #   image: docker.elastic.co/elastic-agent/elastic-agent-complete-wolfi:8.17.4
  #   container_name: elastic-agent-synthesis
  #   restart: unless-stopped
  #   user: elastic-agent
  #   environment:
  #     - FLEET_SERVER_ENABLE=${FLEET_SERVER_ENABLE:-true}
  #     - FLEET_SERVER_ELASTICSEARCH_HOST=${FLEET_SERVER_ELASTICSEARCH_HOST:-https://172.18.0.8:9200}
  #     # - FLEET_SERVER_POLICY_ID=${FLEET_SERVER_POLICY_ID:-NkhiTjJaVUJyR2xNZUdBZWxkUUw6VlYtYzR1WXBTbmVmX2tPal91ZndtQQ==}
  #     # - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN:-NW5iTTJaVUJyR2xNZUdBZXVkVDc6bTZDY2NnSVdRQnVvSHlxN3NSeHRpQQ==}
  #     - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-password} # this replace token
  #   networks:
  #     - dockernet
  #   ports:
  #     - 8220:8220


