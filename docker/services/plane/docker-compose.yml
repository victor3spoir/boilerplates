networks:
  dockernet:
    external: true

services:
  web:
    image: makeplane/plane-frontend
    restart: always
    command: node web/server.js web
    depends_on:
      - api
    env_file:
      .env
    ports:
      - 30800:3000

  admin:
    image: makeplane/plane-admin
    restart: always
    command: node admin/server.js admin
    depends_on:
      - api
      - web
    env_file:
      .env
    ports:
      - 30802:3000
  space:
    image: makeplane/plane-space
    restart: always
    command: node space/server.js space
    depends_on:
      - api
      - web
    env_file:
      .env
    ports:
      - 30801:3000
  api:
    image: makeplane/plane-backend:stable
    restart: always
    command: ./bin/docker-entrypoint-api.sh
    depends_on:
      - plane-db
      - plane-redis
    env_file:
      .env
  worker:
    image: makeplane/plane-backend:stable
    command: ./bin/docker-entrypoint-worker.sh
    depends_on:
      - api
      - plane-db
      - plane-redis
    env_file:
      .env
  beat-worker:
    image: makeplane/plane-backend:stable
    restart: always
    command: ./bin/docker-entrypoint-beat.sh
    depends_on:
      - api
      - plane-db
      - plane-redis
    env_file:
      .env
  migrator:
    image: makeplane/plane-backend:stable
    restart: no
    command: ./bin/docker-entrypoint-migrator.sh
    depends_on:
      - plane-db
      - plane-redis
    env_file:
      .env
  live:
    image: makeplane/plane-live:stable
    restart: always
    command: node live/dist/server.js
    env_file:
      .env
  plane-db:
    image: postgres:17-alpine
    restart: always
    command: postgres -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data

  plane-redis:
    image: valkey/valkey:7.2.5-alpine
    restart: always
    volumes:
      - redisdata:/data
    env_file:
      .env
  plane-mq:
    image: rabbitmq:4-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    env_file:
      .env
  plane-minio:
    image: minio/minio
    restart: always
    command: server /export --console-address ":9090"
    volumes:
      - uploads:/export
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    env_file:
      .env
volumes:
  pgdata:
  redisdata:
  uploads:
  rabbitmq_data:
